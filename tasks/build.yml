---

- name: Set build facts
  set_fact:
    build_src_path: "{{ build_repo_url.split('/')[-3:-1]|join('/') }}"
    build_repo_path: "{{ build_repo_url.split('/')[-3:]|join('/') }}"
    build_package_name: "{{ build_repo_url.split('/')[-1:][0] }}"

- name: Set build directory
  set_fact:
    temp_dir: "{{ build_dir }}/{{ build_package_name }}"

- name: Create directory structure
  file:
    path: "{{ temp_dir }}/src/{{ build_src_path }}"
    state: directory
  
- name: Clone repository
  git:
    repo: "{{ build_repo_url }}"
    dest: "{{ temp_dir }}/src/{{ build_repo_path }}/"
    version: "{{ build_branch }}"
    force: yes

- name: Build 
  command: >
    ./{{ build_script }} 
    --debug 
    --package 
    {% if build_upload_to_s3 %}--upload {% endif %}
    {% if build_master_version != None %}--version={{ build_master_version }} {% endif %}
    --platform={{ build_platform }} 
    --arch={{ build_arch }} 
    {% if build_rc != None %} --rc={{ build_rc }} {% endif %}
    {% if build_iteration != None %} --iteration={{ build_iteration }} {% endif %}
    {% if build_upload_bucket != None %} --bucket={{ build_upload_bucket }}{% endif %}
    {% if build_nightly %}--nightly {% endif %}
    {% if build_run_generate %}--generate {% endif %}
    {% if build_tags != None %}--build-tags={{ build_tags|join(',') }} {% endif %}
    {% if build_output_name != None %}--name={{ build_output_name }} {% endif %}
  args:
     chdir: "{{ temp_dir }}/src/{{ build_repo_path }}"
  environment:
    GOPATH: "{{ temp_dir }}"
    GOBIN: "{{ temp_dir }}/bin"
    # GOROOT: "{{ ansible_env.HOME }}/.gvm/gos/go{{ build_go_version }}"
    # PATH: "{{ ansible_env.HOME }}/.gvm/gos/go{{ build_go_version }}/bin:{{ temp_dir }}/bin:{{ ansible_env.PATH }}"
    AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_secret_key }}"
  register: build_output
  ignore_errors: yes

- name: Display build output
  debug:
    var: build_output.stdout_lines

- name: Create Vagrant output directory
  file:
    path: /vagrant/build-output/{{ build_package_name|string }}
    state: directory
  when: is_vagrant

- name: Create Docker output directory
  file:
    path: /ansible/build-output/{{ build_package_name|string }}
    state: directory
  when: is_docker

- name: Find newly-built packages
  command: find {{ temp_dir }}/src/{{ build_repo_path }} -name '*deb' -o -name '*rpm' -o -name '*gz' -o -name '*zip'
  register: find_packages
  when: is_vagrant or is_docker

- name: Copy newly-built packages to Vagrant root directory
  command: mv {{ item }} /vagrant/build-output/{{ build_package_name|string }}/
  with_items:
    - "{{ find_packages.stdout_lines }}"
  when: is_vagrant

- name: Copy newly-built packages to Docker directory
  command: mv {{ item }} /ansible/build-output/{{ build_package_name|string }}/
  with_items:
    - "{{ find_packages.stdout_lines }}"
  when: is_docker

